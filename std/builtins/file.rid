mod!doc = @'
File builtins
@'

File!name = 'File'
File!doc = @'
A file stream.
Can be material or virtual

- path : Path (relative or absolute) to the target file
- [mode, Str] : Opening mode, string describing how to open the
    file, see details below. 'r' by default

* Opening modes :
+ r : Read only
+ w : Write only
+ rw : Read and write
+ rb : Read only (binary mode)
+ wb : Write only (binary mode)
+ rwb : Read and write (binary mode)
@'

File.stdin!doc = @'
Standard input stream
@'

File.stdout!doc = @'
Standard output stream
@'

File.stderr!doc = @'
Standard error output stream
@'

@doc'
Reads the next line of stdin.
Throws a RuntimeError if end of file found
@'
fn input() {
    ln = File.stdin.read_line()

    if ln == null {
        throw RuntimeError('End of file for stdin input')
    }

    return ln
}

@doc'
Generates the auto documentation for multiple modules in
a specified directory

- dirpath, Str : Path to the target directory
- modules, HashMap : [module_name, module_content] pairs to document
- title, Str : Header of the README
- [description, Str] : Description added just after the header in the README
- [verbose, Bool] : If true, displays written files
- [notes, HashMap] : [note_name, note_content] pairs, notes added at
    the bottom of the README
- [lowercase_filenames, Bool] : Whether markdown files are lower cased
@'
fn autodoc(dirpath, modules, title, description: null,
        verbose: true, notes: {}, lowercase_filenames: true) {
    # Returns the relative / absolute path of the module documentation
    get_path = |name, relative, lower| -> {
        suffix = name + '.md'

        if lower {
            suffix = copy(suffix)
            suffix.lower()
        }

        if relative {
            return suffix
        } else {
            return dirpath + '/' + suffix
        }
    }

    # Generate modules
    for let mod_name, mod_content in modules {
        path = get_path(mod_name, false, lowercase_filenames)

        f = File(path, 'w')

        documentation = '[Summary](README.md)\n\n'
        documentation += doc(mod_content)

        f.write(documentation)
        f.close()

        if verbose {
            print 'Written', path
        }
    }

    readme_path = get_path('README', false, false)

    f = File(readme_path, 'w')
    f.write('# ' + title + '\n')
    if description != null {
        f.write(description + '\n\n')
    }

    f.write('## Modules\n')

    # Generate summary
    for let mod_name, _ in modules {
        path = get_path(mod_name, true, lowercase_filenames)
        line = '- [' + mod_name + '](' + path + ')'
        f.write(line + '\n')
    }

    # Add notes such as version
    if len(notes) > 0 {
        f.write('\n## Notes\n')
        for let name, content in notes {
            f.write('- ' + name + ' : ' + content + '\n')
        }
    }

    f.close()
    if verbose {
        print 'Written', readme_path
    }
}

@doc'
Generates the Riddim documentation

- dirpath, Str : Directory where the documentation is generated to
@'
fn autodoc_std(dirpath) {
    title = 'Riddim Standard Library Documentation'

    # TODO J : See it online ...
    description = 'This folder contains the auto-generated'
    description += 'documentation of the **Riddim Standard Library** '
    description += '(' + version + ')'

    # Extra notes to add at the bottom of the README
    notes = {
        'Version': version,
    }

    # Import modules to document
    use builtins
    use math

    # Name / content
    modules = TreeMap({
        'Builtins': builtins,
        'Math': math,
    })

    # Generate
    autodoc(dirpath, modules, title, description,
        notes: notes, lowercase_filenames: true)
}
