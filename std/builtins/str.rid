mod!doc = @'
Str methods
@'

Str!doc = 'String data type'
Str!name = 'Str'

set_default_collection(
    Str,
    is_random_access: true
)

fn Str@(in)(item) {
    if item is not Str {
        return false
    }

    item_len = len(item)
    me_len = len(me)
    if item_len > me_len {
        return false
    }

    for i in 0 ->= me_len - item_len {
        if me[i -> i + item_len] == item {
            return true
        }
    }

    return false
}

@doc'
Replaces all occurences of old by new

- old : What to search for
- new : What to replace
@'
fn Str.replace(old, new) {
    old_len = len(old)

    # Iterate backwards
    for i in len(me) - old_len ->= 0 .. -1 {
        if me[i -> i + old_len] == old {
            me[i -> i + old_len] = new
        }
    }
}

@doc'
Removes all occurences of target

- target : Pattern to remove

* Note : equivalent to `replace(target, '')`
@'
fn Str.erase(target) {
    me.replace(target, '')
}

@doc'
Splits the string into substrings delimited by
delim.

- [delim, Str] : Every delimiters (' \n') will split
    spaces and new lines
- return, Vec{Str} : Substrings
@'
fn Str.split(delim: ' ') {
    words = []
    word_start = 0
    for i in 0 -> len(me) {
        # The char at index i is a delimiter
        if me[i] in delim {
            # Empty word, discard
            if word_start == i {
                word_start += 1

                continue
            }

            # Register this word and start next word
            words.add(me[word_start -> i])
            word_start = i + 1
        }
    }

    # Add last word
    if word_start != len(me) {
        words.add(me[word_start -> len(me)])
    }

    return words
}

@doc'
Concatenates every item of the iterable into a string, the current
string separates every item.

- iterable : Iterable of elements containing a string representation
- return, Str : Concatenation of all items with 'me' as separator
@'
fn Str.join(iterable) {
    result = ''
    for i in iterable {
        result += Str(i) + me
    }

    # Remove last suffix
    if len(result) >= len(me) {
        return result[0 -> len(result) - len(me)]
    } else {
        return ''
    }
}
